import React, { useState, useEffect, Fragment } from "react";
import { connect } from "react-redux";
import store from "../../store";
import { Redirect, Link } from "react-router-dom";
import axios from "axios";
import PropTypes from "prop-types";
import WordModal from "../translation/WordModal";
import WordEditModal from "../translation/WordEditModal";
import { setAlert } from "../../actions/alert";
import { loadUserWords } from "../../actions/userWords";
import { TweenMax } from "gsap";
import {
  getPhotos,
  getWords,
  chunkArrayFunc,
  segmenter,
  itirateWordsFromDB,
  // getTranslation,
  countZnChars,
  parseTags,
} from "../../actions/helpers";
import Paragraph from "./Paragraph";
import { v4 as uuid } from "uuid";
import "./style.css";
import { bgTextLen, smTextLen, textCategories } from "../../constants/consts.json";
import { defaultTextPic } from "../../constants/urls.json";
import { NullUser, User } from "../../patterns/User";

const TextAddForm = ({ loadUserWords, user, location }) => {
  useEffect(() => {
    loadUserWords();
    setTimeout(noticeMe, 1000);
  }, []);

  const [isLongText, setIsLongText] = useState(false);
  const [photosResult, setPhotosResult] = useState(true);
  const [isEnglish, setIsEnglish] = useState(false);
  const [isRedirected, setIsRedirected] = useState(false);
  const [okToPublish, setOkToPublish] = useState(false);
  const [textLen, setTextLen] = useState(0);
  const [photosUrls, setPhotosUrls] = useState(false);
  const [isTranslated, setIsTranslated] = useState(true); // –ø–æ–∫–∞ —á—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
  const [formData, setFormData] = useState({
    chineseChunkedWords: [],
    chunkedTranslation: [],
    description: "", // rewriten usestate
    title: "", // rewriten usestate
    level: 1, // rewriten usestate
    chunkedOriginText: [],
    tags: "",
    length: 0,
    allwords: [],
    textId: "",
    pic_theme: "", // in English for pic_url
    pic_url: defaultTextPic,
    theme_word: "", // rewriten usestate,
    source: "",
    categoryInd: 0,
    audioSrc: 0,
  });

  useEffect(() => {
    if (textLen > smTextLen) {
      // setIsTranslated(true);
      setIsLongText(true);
      store.dispatch(
        setAlert(`–£ –≤–∞—Å –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç (–ø—Ä–µ–≤—ã—à–∞–µ—Ç ${smTextLen}Â≠ó). –ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`, "danger")
      );
    } else {
      // setIsTranslated(false);
      setIsLongText(false);
    }
  }, [textLen]);

  const preprocessForm = async (e) => {
    e.preventDefault();

    const textArea = document.getElementById("textArea");

    if (textLen > bgTextLen) {
      return store.dispatch(
        setAlert(
          `–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç (–ø—Ä–µ–≤—ã—à–∞–µ—Ç ${bgTextLen}Â≠ó). –†–∞–∑–±–µ–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ —á–∞—Å—Ç–∏`,
          "danger"
        )
      );
    }

    const translationArea = document.getElementById("translationArea");
    const originText = textArea.value.trim().replace(/\n\s*\n/g, "\n");

    let chunkedOriginText = originText.split("\n"); // array of strings
    chunkedOriginText = chunkedOriginText.filter((chunk) => chunk);
    chunkedOriginText = chunkedOriginText.map((chunk) => chunk.trim());
    textArea.value = chunkedOriginText.join("\n\n");

    let allwords, chineseChunkedWords;
    if (!isLongText) {
      allwords = await segmenter(originText);
      allwords = allwords.filter((word) => word !== " ");
      const wordsFromDB = await getWords(allwords);
      const newArr = itirateWordsFromDB(allwords, wordsFromDB);
      chineseChunkedWords = chunkArrayFunc(newArr).filter((chunk) => chunk.length);
    } else {
      chineseChunkedWords = chunkedOriginText;
    }

    let chunkedTranslation;
    if (!isTranslated) {
      // const { translation } = await getTranslation(chunkedOriginText);
      // setIsTranslated(true);
      // translationArea.value = translation.join("\n\n");
      // chunkedTranslation = translation;
    } else {
      let translationTrimed = translationArea.value.trim();
      chunkedTranslation = translationTrimed.split("\n"); // array of strings
      chunkedTranslation = chunkedTranslation.filter((chunk) => chunk.length);
    }

    const length = countZnChars(originText);

    setFormData({
      ...formData,
      chineseChunkedWords,
      chunkedTranslation,
      chunkedOriginText,
      length,
      allwords,
    });
  };

  const loadPictures = async (e) => {
    e.preventDefault();
    if (!formData.pic_theme) return;
    const res = await getPhotos(formData.pic_theme);
    setPhotosResult(res);
    setPhotosUrls(res);
  };

  const choosePicUrl = (e) => {
    if (e.target.className !== "imgToChoose") return;

    const selectedImg = document.getElementsByClassName("imgToChooseActive");
    if (selectedImg[0]) selectedImg[0].classList.remove("imgToChooseActive");
    document.getElementById("pic_theme_url").value = e.target.src;
    e.target.className += " imgToChooseActive";

    setFormData({
      ...formData,
      pic_url: e.target.src,
    });
  };

  const publishText = async (formdata) => {
    const config = {
      headers: {
        "Content-Type": "application/json",
      },
    };

    const {
      chunkedTranslation,
      tags,
      chunkedOriginText,
      title,
      description,
      level,
      length,
      allwords,
      pic_url,
      theme_word,
      isApproved,
      categoryInd,
      source,
      audioSrc,
    } = formdata;

    const body = JSON.stringify({
      origintext: chunkedOriginText,
      title,
      description,
      level,
      tags: parseTags(tags),
      translation: chunkedTranslation,
      chinese_arr: allwords,
      length,
      pic_url,
      theme_word,
      isApproved,
      categoryInd,
      source,
      name: user.name,
      isLongText,
      audioSrc,
    });

    try {
      await axios.post(`/api/texts/create`, body, config);
      alert(
        "–¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω. –°–ü–ê–°–ò–ë–û, —á—Ç–æ –≤–Ω–æ—Å–∏—Ç–µ —Å–≤–æ–π –≤–∫–ª–∞–¥!"
      );
      setIsRedirected(true);
    } catch (err) {
      console.log(err);
    }
  };

  const handleKeyDown = (e) => {
    e.target.style.height = "inherit";
    e.target.style.height = `${e.target.scrollHeight}px`;
  };

  const noticeMe = () => {
    TweenMax.fromTo(
      ".noticeMe",
      { backgroundColor: "#e74c3c" },
      { duration: 2, backgroundColor: "#f39c12" }
    );
  };

  const testEngInput = (str) => setIsEnglish(/^[a-zA-Z]+$/.test(str));

  if (isRedirected) return <Redirect to='/not_approved_texts' />;

  const readyToClick = <label className='text-danger'>–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–∫–æ–º 1 –∏–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –Ω–∏–∂–µ:</label>;
  const isNotEnglish = <label className='text-danger'>–¢–û–õ–¨–ö–û –õ–ê–¢–ò–ù–°–ö–ò–ï –ë–£–ö–í–´</label>;
  const loadPicsErr = (
    <label className='text-danger'>–£–ø—Å, –∫–∞—Ä—Ç–∏–Ω–æ–∫ –Ω–µ –Ω–∞—à–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å —Å–ª–æ–≤–æ</label>
  );

  const loadPicsBtn = (
    <Fragment>
      <label className={formData.pic_theme ? "text-warning" : "text-secondary"}>
        –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞:
      </label>
      <button
        className='btn btn-sm btn-primary mx-1'
        disabled={!formData.pic_theme && !photosUrls}
        onClick={(e) => {
          loadPictures(e);
          noticeMe();
        }}
      >
        –ó–∞–≥—Ä—É–∑–∏—Ç—å
      </button>
      {!photosResult && loadPicsErr}
    </Fragment>
  );

  const loadPicsBtnClicked = !isEnglish && formData.pic_theme ? isNotEnglish : loadPicsBtn;

  return (
    <Fragment>
      {user.isNull ? (
        <p>
          –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.{" "}
          <Link to='/login'>–ó–∞–ª–æ–≥–∏–Ω—å—Ç–µ—Å—å</Link> , –ø–æ–∂–∞–ª—É–π—Å—Ç–∞
        </p>
      ) : (
        <Fragment>
          <div className='col-md-12'>
            <h2>–î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ß–∏—Ç–∞–ª–∫–∏</h2>
            <h4>—Å–ª–µ–¥—É—è —à–∞–≥–∞–º –Ω–∏–∂–µ</h4>

            <p>
              üôèüèª —Å–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ –ø—Ä–µ—É–º–Ω–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤
              –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
              <br />
              üî• —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ - –ø–æ–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥, –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –∏ –∞–¥–º–∏–Ω. –°–ø–∞—Å–∏–±–æ –í–∞–º!
            </p>

            <div className='alert alert-warning noticeMe'>
              <div className='mb-3'>
                {!formData.title && (
                  <Fragment>
                    <h4 className='alert-heading'>–®–ê–ì 1</h4>
                    <p>
                      <span>
                        –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ö–æ—Ç—è –±—ã –∑–∞–≥–æ–ª–æ–≤–æ–∫. üôèüèª –≤—ã —Ö–æ—Ä–æ—à–æ –ø–æ–º–æ–∂–µ—Ç–µ, –µ—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.
                      </span>
                    </p>
                  </Fragment>
                )}

                {formData.title && textLen === 0 && (
                  <Fragment>
                    <h4 className='alert-heading'>–®–ê–ì 2</h4>
                    <p>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—Å—Ç–∞–≤–∏—Ç—å –∫–∏—Ç–∞–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç</p>
                    <p>
                      –í–ù–ò–ú–ê–ù–ò–ï: –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥, —Ç–æ –∫–ª–∏–∫–Ω–∏—Ç–µ —Ç—É–º–±–ª–µ—Ä –Ω–∞–¥ –ø–æ–ª–µ–º
                      –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞, —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å google translate
                    </p>
                  </Fragment>
                )}

                {textLen > 0 && formData.chineseChunkedWords.length === 0 && (
                  <Fragment>
                    <h4 className='alert-heading'>–®–ê–ì 3</h4>
                    <p>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞' –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞</p>
                  </Fragment>
                )}

                {formData.chineseChunkedWords.length !== 0 && (
                  <Fragment>
                    <h4 className='alert-heading'>–®–ê–ì 4</h4>
                    <p>
                      <span>
                        –ü–æ–ø—Ä–∞–≤—å—Ç–µ —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –∏ –∫–∏—Ç–∞–π—Å–∫–∏–π –æ—Ä–∏–≥–∏–Ω–∞–ª –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (–ø–æ—Å–ª–µ
                        —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏—Ç–µ–µ '–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞').
                        <br />
                        üî• –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç, —Ç–æ –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å'.
                        <br />
                        üõë –∫–∏—Ç–∞–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ –º–æ–∂–Ω–æ –æ—Ç–¥–µ–ª–∏—Ç—å –ø—Ä–æ–±–µ–ª–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–∏ –≤—ã–¥–µ–ª–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.
                        <br />
                        üôèüèª –≤—ã —Ö–æ—Ä–æ—à–æ –ø–æ–º–æ–∂–µ—Ç–µ, –µ—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è (–æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ç—ç–≥–∏)
                      </span>
                    </p>
                  </Fragment>
                )}
              </div>
              <div className='progress' style={{ border: "none" }}>
                <div
                  className={`progress-bar bg-${
                    formData.chunkedOriginText.length && formData.chunkedOriginText[0] !== ""
                      ? "success"
                      : "info"
                  }`}
                  role='progressbar'
                  style={{
                    width: `${
                      ((formData.title ? 1 : 0) +
                        (formData.description ? 1 : 0) +
                        (formData.tags.length && formData.tags[0] !== "" ? 1 : 0) +
                        (formData.pic_theme ? 1 : 0) +
                        (formData.theme_word ? 1 : 0) +
                        (formData.pic_url !== defaultTextPic ? 1 : 0) +
                        (photosUrls ? 1 : 0) +
                        (formData.chunkedOriginText.length && formData.chunkedOriginText[0] !== ""
                          ? 1
                          : 0) +
                        (formData.chunkedTranslation.length && formData.chunkedTranslation[0] !== ""
                          ? 1
                          : 0) +
                        1) *
                      10
                    }%`,
                  }}
                  aria-valuenow='25'
                  aria-valuemin='0'
                  aria-valuemax='100'
                ></div>
              </div>
            </div>

            <div className='row'>
              <WordModal />
              <WordEditModal />
            </div>

            <form style={{ width: "100%" }}>
              <fieldset>
                <div className='form-row'>
                  <div className='form-group col-md-6'>
                    <label htmlFor='title'>–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ–∫—Å—Ç–∞</label>
                    <input
                      onBlur={noticeMe}
                      onChange={(e) => {
                        setFormData({
                          ...formData,
                          [e.target.id]: e.target.value,
                        });
                      }}
                      type='text'
                      className={`form-control ${!formData.title && "is-invalid"}`}
                      id='title'
                      placeholder='–ó–∞–≥–æ–ª–æ–≤–æ–∫'
                      autoComplete='off'
                    />
                  </div>
                  <div className='col-md-6'>
                    <div className='mb-2'>–ú–æ–∂–Ω–æ –∏ –±–µ–∑ –Ω–∏—Ö, –Ω–æ –ª—É—á—à–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å üôÇ</div>
                    <div>
                      <a
                        className='btn btn-primary'
                        data-toggle='collapse'
                        href='#collapseExample'
                        role='button'
                        aria-expanded='false'
                        aria-controls='collapseExample'
                      >
                        –ó–∞–ø–æ–ª–Ω–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
                      </a>
                    </div>
                  </div>
                </div>

                <div className='collapse' id='collapseExample'>
                  <div className='bg-light'>
                    <div className='form-row'>
                      <div className='form-group col-md-6'>
                        <label htmlFor='description'>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</label>
                        <input
                          onBlur={noticeMe}
                          onChange={(e) =>
                            setFormData({ ...formData, [e.target.id]: e.target.value })
                          }
                          type='text'
                          className={`form-control`}
                          id='description'
                          autoComplete='off'
                          placeholder='–û —á–µ–º –∏–ª–∏ –æ—Ç–∫—É–¥–∞ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç...'
                        />
                      </div>
                      <div className='form-group col-md-6'>
                        <label htmlFor='tags'>–¢—ç–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é</label>
                        <input
                          onBlur={noticeMe}
                          onChange={(e) => setFormData({ ...formData, tags: e.target.value })}
                          type='text'
                          className={`form-control`}
                          id='tags'
                          placeholder='–°–ø–∏—Å–æ–∫ —Ç—ç–≥–æ–≤'
                        />
                      </div>
                    </div>
                    <div className='form-row'>
                      <div className='form-group col-md-3'>
                        <label htmlFor='level'>–£—Ä–æ–≤–µ–Ω—å</label>
                        <select
                          className='form-control'
                          id='level'
                          onChange={(e) =>
                            setFormData({ ...formData, [e.target.id]: e.target.value })
                          }
                        >
                          <option>1</option>
                          <option>2</option>
                          <option>3</option>
                        </select>
                      </div>
                      <div className='form-group col-md-3'>
                        <label htmlFor='categoryInd'>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                        <select
                          className='form-control'
                          id='categoryInd'
                          onChange={(e) =>
                            setFormData({ ...formData, [e.target.id]: e.target.value })
                          }
                        >
                          {textCategories.map((x, ind) => (
                            <option value={ind} key={ind}>
                              {x}
                            </option>
                          ))}
                        </select>
                      </div>
                      <div className='form-group col-md-6'>
                        <label htmlFor='source'>
                          –ò—Å—Ç–æ—á–Ω–∏–∫: –∞–≤—Ç–æ—Ä, –∫–Ω–∏–≥–∞, –∂—É—Ä–Ω–∞–ª –∏–ª–∏ –¥–æ–º–µ–Ω —Å–∞–π—Ç–∞ (–∫—Ä–∞—Ç–∫–æ)
                        </label>
                        <input
                          onChange={(e) =>
                            setFormData({ ...formData, [e.target.id]: e.target.value })
                          }
                          type='text'
                          className='form-control'
                          id='source'
                          placeholder='–ò—Å—Ç–æ—á–Ω–∏–∫ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)'
                          autoComplete='off'
                        />
                      </div>
                    </div>
                    <div className='form-row'>
                      <div className='form-group col-md-3'>
                        <label htmlFor='pic_theme'>–¢–µ–º–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ (1 —Å–ª–æ–≤–æ Eng)</label>
                        <input
                          onBlur={noticeMe}
                          onChange={(e) => {
                            testEngInput(e.target.value);
                            setFormData({ ...formData, [e.target.id]: e.target.value });
                          }}
                          type='text'
                          className={`form-control`}
                          id='pic_theme'
                          placeholder='–ù–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º'
                          autoComplete='off'
                        />
                      </div>
                      <div className='form-group col-md-3'>
                        <label htmlFor='theme_word'>1 –∏–ª–∏ 2 Ê±âÂ≠ó –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É</label>

                        <input
                          onBlur={noticeMe}
                          onChange={(e) =>
                            setFormData({ ...formData, [e.target.id]: e.target.value })
                          }
                          type='text'
                          className={`form-control`}
                          id='theme_word'
                          placeholder='Ê±âÂ≠ó'
                          autoComplete='off'
                        />
                      </div>
                      <div className='form-group col-md-6'>
                        <label htmlFor='pic_theme_url'>URL –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏</label>
                        <input
                          type='text'
                          className='form-control'
                          id='pic_theme_url'
                          placeholder='–ö–ª–∏–∫–Ω–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–∏–∂–µ'
                          autoComplete='off'
                          disabled
                        />
                      </div>
                    </div>
                    <div className='form-row' style={{ paddingLeft: "5px" }}>
                      {photosUrls ? readyToClick : loadPicsBtnClicked}
                    </div>
                    <div className='form-row'>
                      <div
                        className='form-group col-md-12'
                        id='photosDiv'
                        onClick={(e) => {
                          choosePicUrl(e);
                          noticeMe();
                        }}
                      ></div>
                    </div>
                  </div>
                </div>

                {
                  // <div className='form-row'>
                  // <div className='form-group col-md-6'></div>
                  // <div className='form-group col-md-6 d-flex align-self-end'>
                  //   <div className='custom-control custom-switch mb-2'>
                  //     <input
                  //       type='checkbox'
                  //       className='custom-control-input'
                  //       id='needGoogle'
                  //       checked={!isTranslated}
                  //       onChange={() => setIsTranslated(!isTranslated)}
                  //       disabled={isLongText }
                  //     />
                  //     <label className='custom-control-label text-danger' htmlFor='needGoogle'>
                  //       {!isTranslated ? "–ù—É–∂–µ–Ω –≥—É–≥–ª-–ø–µ—Ä–µ–≤–æ–¥" : "–í—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥"}
                  //     </label>
                  //   </div>
                  // </div>
                  // </div>
                }

                <div className='form-row'>
                  <div className='form-group col-md-6'>
                    <label htmlFor='textArea'>–í—Å—Ç–∞–≤—å—Ç–µ –∫–∏—Ç–∞–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:</label>
                    <textarea
                      onClick={handleKeyDown}
                      onChange={(e) => {
                        setTextLen(e.target.value.length);
                        setOkToPublish(false);
                      }}
                      className='form-control'
                      id='textArea'
                      rows='3'
                      placeholder='Ê±âÂ≠ó„ÄÇ„ÄÇ„ÄÇ'
                      disabled={!formData.title}
                    ></textarea>
                    <small className='text-muted'>
                      {textLen}/{smTextLen}
                    </small>
                  </div>
                  <div className='form-group col-md-6'>
                    <label htmlFor='translationArea'>–ò—Å–ø—Ä–∞–≤—å—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥:</label>
                    <textarea
                      onClick={handleKeyDown}
                      onChange={() => setOkToPublish(false)}
                      className='form-control'
                      id='translationArea'
                      rows='3'
                      placeholder='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –í—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥ (–∏–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å –≥—É–≥–ª-—Ç—Ä–∞–Ω—Å–ª–µ–π—Ç –≤—Ä—É—á–Ω—É—é)'
                      disabled={!isTranslated}
                    ></textarea>
                    <small className='text-muted'>–Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã</small>
                  </div>
                </div>

                <div className='form-row'>
                  {textLen !== 0 && (
                    <button
                      type='submit'
                      className='btn btn-primary mx-1'
                      onClick={(e) => {
                        setOkToPublish(true);
                        noticeMe();
                        preprocessForm(e);
                      }}
                    >
                      –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
                    </button>
                  )}
                </div>
              </fieldset>
            </form>
          </div>
          <hr />

          <div className='row'>
            {formData &&
              formData.chineseChunkedWords.map((chunk, ind) => (
                <Paragraph
                  chunk={chunk}
                  originTxt={formData.chunkedOriginText[ind]}
                  index={ind}
                  key={uuid()}
                  translation={formData.chunkedTranslation[ind]}
                  toEdit={true}
                  toPostLongText={isLongText}
                />
              ))}
          </div>
          <hr />

          <div className='col-md-12' style={{ height: "6rem" }}>
            {formData.chineseChunkedWords.length !== 0 && okToPublish && (
              <div className=''>
                <button
                  className='btn btn-primary mx-1'
                  onClick={() => publishText(formData)}
                  disabled={
                    formData.chunkedTranslation.length !== formData.chineseChunkedWords.length
                  }
                >
                  –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
                </button>

                {formData.chunkedTranslation.length !== formData.chineseChunkedWords.length && (
                  <span className='text-danger'>
                    –ö–æ–ª-–≤–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!
                  </span>
                )}
              </div>
            )}
          </div>
        </Fragment>
      )}
    </Fragment>
  );
};

TextAddForm.propTypes = {
  userwords: PropTypes.array.isRequired,
  loadUserWords: PropTypes.func.isRequired,
};

const mapStateToProps = (state) => ({
  userwords: state.userwords.userwords,
  wordsLoading: state.userwords.loading,
  user: state.auth.user ? new User(state.auth.user) : new NullUser(),
  textToEdit: state.texts.text,
});

export default connect(mapStateToProps, { loadUserWords })(TextAddForm);
